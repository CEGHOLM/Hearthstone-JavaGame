/*
 * Copyright (C) 2022-2024. Henrik BÃ¦rbak Christensen, Aarhus University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    // Tell Gradle that this is a java project
    id 'java'
    // and to use JaCoCo for code coverage computation
    id 'jacoco'
}

repositories {
    // Tell where to get libraries: from 'mvnrepository.com'
    mavenCentral()
}

dependencies {
    // The FRDS.Broker lib
    implementation group: 'com.baerbak.maven',
            name: 'broker', version: '4.0'
    // Avoid a security vulnerability in Jetty, which Broker depends upon
    implementation group: 'org.eclipse.jetty',
            name: 'jetty-server', version: '9.4.56.v20240826'


    // Bind SLF4J it to the Log4J logging framework
    implementation group: 'org.slf4j', name: 'slf4j-log4j12',
            version: '1.7.36'

    // Depend on the MiniDraw library
    implementation group: 'com.baerbak.maven',
            name: 'minidraw', version: '4.0'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'

    // Use the Hamcrest matcher library
    testImplementation group: 'org.hamcrest',
            name: 'hamcrest-library', version: '2.2'

    // Mockito for JUnit 5
    testImplementation 'org.mockito:mockito-core:4.1.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.1.0'

    // Maven Central dependency on WizardHub
    implementation group: 'com.baerbak.maven',
            name: 'wizardhub', version: '1.0.0'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

// Use gradle v 8
wrapper {
  gradleVersion = '8.7'
}

// Use latest Jacoco test coverage tool
jacoco {
  toolVersion = "0.8.12"
}

// === Execution tasks - for running visual tests for
//      manual test-driving the MiniDraw framework customization.


// Visual test cases for basic HotStone related 'Figure' types,
// note that the source set is set to the 'test folder' as they
// are located there.

task text(type: JavaExec) {
    group 'HotStone Figure Visual Tests'
    description 'Demonstrate TextFigure'

    mainClass = 'hotstone.figuretestcase.ShowTextFigure'
    classpath = sourceSets.test.runtimeClasspath
}

task button(type: JavaExec) {
    group 'HotStone Figure Visual Tests'
    description 'Demonstrate ButtonFigure'

    mainClass = 'hotstone.figuretestcase.ShowButtonFigure'
    classpath = sourceSets.test.runtimeClasspath
}

task message(type: JavaExec) {
    group 'HotStone Figure Visual Tests'
    description 'Demonstrate Message System'

    mainClass = 'hotstone.figuretestcase.ShowMessageSystem'
    classpath = sourceSets.test.runtimeClasspath
}

task hero(type: JavaExec) {
    group 'HotStone Figure Visual Tests'
    description 'Demonstrate HeroFigure and FigureType use'

    mainClass = 'hotstone.figuretestcase.ShowHeroFigure'
    classpath = sourceSets.test.runtimeClasspath
}

task card(type: JavaExec) {
    group 'HotStone Figure Visual Tests'
    description 'Demonstrate CardFigure'

    mainClass = 'hotstone.figuretestcase.ShowCardFigure'
    classpath = sourceSets.test.runtimeClasspath
}

task minion(type: JavaExec) {
    group 'HotStone Figure Visual Tests'
    description 'Demonstrate MinionFigure'

    mainClass = 'hotstone.figuretestcase.ShowMinionFigure'
    classpath = sourceSets.test.runtimeClasspath
}

task minionupdate(type: JavaExec) {
    group 'HotStone Figure Visual Tests'
    description 'Demonstrate MinionFigure updating'

    mainClass = 'hotstone.figuretestcase.ShowMinionFigureUpdate'
    classpath = sourceSets.test.runtimeClasspath
}


// Demo and template for solving exercises that
// extend HotStoneDrawing to reflect all Game changes.

// The (Domain to GUI) flow. ===============================

task update(type: JavaExec) {
    group 'HotStone Mandatory Exercise Domain2GUI Tests'
    description 'Test-Drive the *Domain to GUI* Integration'

    mainClass = 'hotstone.domain2gui.ShowUpdate'
    classpath = sourceSets.test.runtimeClasspath
}

// Demo and template for solving exercises that
// develop the MiniDraw tools to handle game mutator calls

// The (UI to Domain) flow. ================================

task tools(type: JavaExec) {
    group 'HotStone Mandatory Exercise GUI2Domain Tests'
    description 'Test-Drive the *GUI to Domain* Tools Integration'

    mainClass = 'hotstone.gui2domain.ShowTools'
    classpath = sourceSets.test.runtimeClasspath
}

// Main - full system
task hotseatstone(type: JavaExec) {
    group 'HotStone Mandatory Exercise System Tests'
    description 'System Testing: HotSeatStone - SemiStone as HotSeat play'

    mainClass = 'hotstone.main.HotSeatStone'
    classpath = sourceSets.main.runtimeClasspath
    args 'semiStone'
}

// === Distributed HotStone - executing targets

// The hotstone server
task hotstoneServer(type: JavaExec) {
    group 'SWEA Distribution'
    description 'Run HotStone server'

    mainClass = 'hotstone.broker.main.HotStoneServer'
    classpath = sourceSets.main.runtimeClasspath
}

// The hotstone story test, manual integrationtest in Broker I delivery
task hotstoneStorytest(type: JavaExec) {
    group 'SWEA Distribution'
    description 'Run a HotStone Story as a MANUAL TEST client '

    mainClass = 'hotstone.broker.main.HotStoneStoryTest'
    classpath = sourceSets.main.runtimeClasspath
    def host = project.hasProperty('host') ? project.host : 'localhost'
    args host
}

// The hotstone client, in Broker II delivery
task hotstoneClient(type: JavaExec) {
    group 'SWEA Distribution'
    description 'Run HotStone client'

    mainClass = 'hotstone.broker.main.HotStoneClient'
    classpath = sourceSets.main.runtimeClasspath

    args project.findProperty('host') ?: 'localhost',
            project.findProperty('who') ?: 'findus'
}

tasks.withType(JavaCompile) {
    sourceCompatibility = '20'
    targetCompatibility = '20'
}

